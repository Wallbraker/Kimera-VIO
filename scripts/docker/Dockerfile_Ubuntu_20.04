# Use an official Python runtime as a parent image
FROM ubuntu:20.04

MAINTAINER Antoni Rosinol "arosinol@mit.edu"

# To avoid tzdata asking for geographic location...
ENV DEBIAN_FRONTEND noninteractive

# Set the working directory to /root
ENV DIRPATH /root
WORKDIR $DIRPATH

#Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends apt-utils
RUN apt-get update && apt-get dist-upgrade -y && apt-get install -y \
	xvfb \
	git cmake \
	libboost-all-dev \
	build-essential cmake unzip pkg-config \
	libjpeg-dev libpng-dev libtiff-dev \
	libvtk6-dev \
	libgtk-3-dev \
	libatlas-base-dev gfortran \
	python3-pip python-dev python-tk \
	libgflags2.2 libgflags-dev libgoogle-glog0v5 libgoogle-glog-dev \
	wget \
	libopencv-dev libopencv-contrib-dev \
	libeigen3-dev \
	python3-pip python3-dev python3-tk


# Install xvfb to provide a display to container for GUI related testing.

# Install GTSAM
RUN git clone https://github.com/borglab/gtsam.git
RUN cd gtsam && \
    git fetch && \
    mkdir build && \
    cd build && \
    cmake \
	-DCMAKE_INSTALL_PREFIX=/usr/local \
	-DGTSAM_USE_SYSTEM_EIGEN=ON \
	-DGTSAM_BUILD_TESTS=OFF \
	-DGTSAM_BUILD_EXAMPLES_ALWAYS=OFF \
	-DCMAKE_BUILD_TYPE=Release \
	-DGTSAM_BUILD_UNSTABLE=ON \
	.. \
	&& \
    make -j$(nproc) install

# Install OpenCV for Ubuntu 18.04


#RUN git clone https://github.com/opencv/opencv.git
#RUN cd opencv && \
#      git checkout tags/3.3.1 && \
#      mkdir build

#RUN git clone https://github.com/opencv/opencv_contrib.git
#RUN cd opencv_contrib && \
#      git checkout tags/3.3.1

#RUN cd opencv/build && \
#      cmake -DCMAKE_BUILD_TYPE=Release \
#      -DCMAKE_INSTALL_PREFIX=/usr/local \
#      -D BUILD_opencv_python=OFF \
#      -D BUILD_opencv_python2=OFF \
#      -D BUILD_opencv_python3=OFF \
#      -DOPENCV_EXTRA_MODULES_PATH=$DIRPATH/opencv_contrib/modules .. && \
#      make -j$(nproc) install

# Install Open_GV
RUN git clone https://github.com/laurentkneip/opengv
RUN cd opengv && \
      mkdir build
RUN cd opengv/build && \
      cmake -DCMAKE_BUILD_TYPE=Release \
      -DCMAKE_INSTALL_PREFIX=/usr/local \
      .. && \
      make -j$(nproc) install

#      -DEIGEN_INCLUDE_DIRS=$DIRPATH/gtsam/gtsam/3rdparty/Eigen \
#      -DEIGEN_INCLUDE_DIR=$DIRPATH/gtsam/gtsam/3rdparty/Eigen .. && \
# Install DBoW2
RUN git clone https://github.com/dorian3d/DBoW2.git
RUN cd DBoW2 \
	&& mkdir build \
	&& cd build \
	&& cmake .. \
	&& make -j$(nproc) install

# Install RobustPGO
ADD https://api.github.com/repos/MIT-SPARK/Kimera-RPGO/git/refs/heads/master version.json
RUN git clone https://github.com/MIT-SPARK/Kimera-RPGO.git
RUN cd Kimera-RPGO \
	&& mkdir build \
	&& cd build \
	&& cmake .. \
	&& make -j$(nproc)

# [Optional] Install spark_vio_evaluation from PyPI
# Hack to avoid Docker's cache when spark_vio_evaluation master branch is updated.
ADD https://api.github.com/repos/ToniRV/spark_vio_evaluation/git/refs/heads/master version.json
RUN git clone https://github.com/ToniRV/spark_vio_evaluation.git
RUN cd spark_vio_evaluation && pip3 install .

# Add credentials on build
ARG SSH_PRIVATE_KEY
RUN mkdir /root/.ssh/
RUN echo "${SSH_PRIVATE_KEY}" > /root/.ssh/id_rsa
RUN chmod 600 ~/.ssh/id_rsa

# Make sure your domain is accepted
RUN touch /root/.ssh/known_hosts
RUN ssh-keyscan -t rsa github.com >> /root/.ssh/known_hosts

# Install Kimera-VIO
ADD . /repo/Kimera-VIO
RUN git clone /repo/Kimera-VIO Kimera-VIO \
	&& cd Kimera-VIO \
	&& mkdir build \
	&& cd build \
	&& cmake .. \
	&& make -j$(nproc)

# Download and extract EuRoC dataset.
#RUN wget http://robotics.ethz.ch/~asl-datasets/ijrr_euroc_mav_dataset/vicon_room1/V1_01_easy/V1_01_easy.zip
#RUN mkdir -p $DIRPATH/euroc && unzip V1_01_easy.zip -d $DIRPATH/euroc

# Yamelize euroc dataset
#RUN bash $DIRPATH/Kimera-VIO/scripts/euroc/yamelize.bash -p $DIRPATH/euroc

#CMD xvfb-run $DIRPATH/Kimera-VIO/scripts/stereoVIOEuroc.bash -p $DIRPATH/euroc -r
#CMD $DIRPATH/Kimera-VIO/scripts/stereoVIOEuroc.bash -p $DIRPATH/euroc -r
